buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:1.5.4.RELEASE"
    }

}

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.4'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'org.liquibase.gradle' version '2.2.1'
    id 'jacoco-report-aggregation'
    id 'com.google.protobuf' version '0.9.4'

}

group = 'org.booking.core'
version = '2.1'
sourceCompatibility = '17'


def databaseProps = new Properties()
file("gradle.properties")
        .withInputStream { databaseProps.load(it) }



configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    liquibaseRuntime.extendsFrom runtime
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "2023.0.1")
     grpcVersion = '1.56.1'
      protobufVersion = '3.23.4'
}

dependencies {
    //Spring
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.kafka:spring-kafka'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.kafka:spring-kafka-test'

    //Database
    runtimeOnly "org.postgresql:postgresql"

    //MapStruct
    implementation 'org.mapstruct:mapstruct:1.5.3.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.3.Final'

    //Liquibase
    implementation 'org.liquibase:liquibase-core:4.20.0'

    liquibaseRuntime 'jakarta.persistence:jakarta.persistence-api:3.1.0'
    liquibaseRuntime 'org.liquibase:liquibase-core:4.20.0'
    liquibaseRuntime 'org.liquibase:liquibase-groovy-dsl:3.0.2'
    liquibaseRuntime 'info.picocli:picocli:4.6.1'
    liquibaseRuntime 'org.postgresql:postgresql'
    liquibaseRuntime 'ch.qos.logback:logback-core:1.4.7'
    liquibaseRuntime 'ch.qos.logback:logback-classic:1.4.7'
    liquibaseRuntime 'org.liquibase.ext:liquibase-hibernate6:4.26.0'
    liquibaseRuntime 'org.springframework.data:spring-data-jpa:3.2.3'
   // liquibaseRuntime 'org.springframework.boot:spring-boot:3.2.3'
    liquibaseRuntime 'org.springframework.boot:spring-boot-starter-security:3.2.3'

    liquibaseRuntime 'org.yaml:snakeyaml:2.0'

    liquibaseRuntime sourceSets.main.output

    //Lombok
    compileOnly 'org.projectlombok:lombok:1.18.26'
    annotationProcessor 'org.projectlombok:lombok:1.18.26'

    //Gson
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.10.1'

    //JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.5'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.5'
    implementation 'com.auth0:java-jwt:4.4.0'

    //Validator
    implementation 'commons-validator:commons-validator:1.8.0'

    //GRPC
     implementation "io.grpc:grpc-netty-shaded:${grpcVersion}"
    implementation "io.grpc:grpc-protobuf:${grpcVersion}"
    implementation "io.grpc:grpc-stub:${grpcVersion}"

    //Test
    testImplementation ('io.rest-assured:rest-assured:5.4.0'){
        exclude group: 'org.apache.groovy', module: 'groovy'
        exclude group: 'org.apache.groovy', module: 'groovy-xml'
    }
    testImplementation 'io.rest-assured:json-path:5.4.0'
    testImplementation 'io.rest-assured:xml-path:5.4.0'
    testImplementation group: 'org.assertj', name: 'assertj-core', version: '3.24.2'
    testImplementation group: 'org.instancio', name: 'instancio-junit', version: '3.7.1'

    //Swagger
    implementation 'org.springdoc:springdoc-openapi-ui:1.5.9'

}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

if (!project.hasProperty("runList")) {
    //project.ext.runList = "main"
    project.ext.runList = "diffChangeLog"
}

project.ext.diffChangelogFile = "src/main/resources/db/changelog/" + new Date().format("yyyyMMddHHmmss") + "_changelog.yml"

liquibase {
    activities {
        main {
            changelogFile "build/resources/main/db/changelog/db.changelog-master.yml"
            url databaseProps.getProperty("url")
            username databaseProps.getProperty("username")
            password databaseProps.getProperty("password")
            referenceUrl databaseProps.getProperty("referenceUrl")
            logLevel "info"
        }
       diffChangeLog {
           changelogFile project.ext.diffChangelogFile
           url databaseProps.getProperty("url")
           username databaseProps.getProperty("username")
           password databaseProps.getProperty("password")
           referenceUrl databaseProps.getProperty("referenceUrl")
           logLevel "info"
       }
    }
    runList = project.ext.runList
}
sourceSets.main.java.srcDir "$buildDir/booking-core/src/main/java"
sourceSets.main.resources.srcDir "$buildDir/booking-core/src/main/resources"

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:${protobufVersion}"
    }
    generatedFilesBaseDir = "$projectDir/src/generated"
    clean {
        delete generatedFilesBaseDir
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
}

import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent
tasks.named('test') {
    useJUnitPlatform()
    testLogging {
        // set options for log level LIFECYCLE
        events TestLogEvent.FAILED,
                TestLogEvent.PASSED,
                TestLogEvent.SKIPPED,
                TestLogEvent.STANDARD_OUT
        exceptionFormat TestExceptionFormat.FULL
        showExceptions true
        showCauses true
        showStackTraces true

        // set options for log level DEBUG and INFO
        debug {
            events TestLogEvent.STARTED,
                    TestLogEvent.FAILED,
                    TestLogEvent.PASSED,
                    TestLogEvent.SKIPPED,
                    TestLogEvent.STANDARD_ERROR,
                    TestLogEvent.STANDARD_OUT
            exceptionFormat TestExceptionFormat.FULL
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}
testCodeCoverageReport {

    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}
build.dependsOn update
